@using SymptomsProject.Enums
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@model SymptomsProject.Models.Symptom

@{
    ViewData["Title"] = "Details";
}

@functions {
    public string GetEnumDisplayName(Enum enumValue)
    {
        return enumValue.GetType()
            .GetMember(enumValue.ToString())
            .FirstOrDefault()
            ?.GetCustomAttribute<DisplayAttribute>()?.Name ?? enumValue.ToString();
    }
}

<h1>Details</h1>

<div>
    <h4>Symptom</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SeverityType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.SeverityType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.SymptomTypes)
        </dt>
        <dd class = "col-sm-10">
            @foreach(SymptomType symptom in Model.SymptomTypes)
            {
                <span>@GetEnumDisplayName(symptom)</span>
                <br />
            }
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CreationDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreationDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.EditDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.EditDate)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
